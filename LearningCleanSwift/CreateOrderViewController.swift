//
//  CreateOrderViewController.swift
//  LearningCleanSwift
//
//  Created by MatÃ­as Elorriaga on 10/11/16.
//  Copyright (c) 2016 melorriaga. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CreateOrderViewControllerInput {
    func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel)
}

protocol CreateOrderViewControllerOutput {
    var shippingMethods: [String] { get }
    func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request)
}

class CreateOrderViewController: UITableViewController, CreateOrderViewControllerInput, UITextFieldDelegate, UIPickerViewDelegate, UIPickerViewDataSource {
    
    var output: CreateOrderViewControllerOutput!
    var router: CreateOrderRouter!
    
    let shippingMethodPicker = UIPickerView()
    let expirationDatePicker = UIDatePicker()
    
    // MARK: - Outlets
    
    @IBOutlet var textFields: [UITextField]!
    @IBOutlet weak var shippingMethodTextField: UITextField!
    @IBOutlet weak var expirationDateTextField: UITextField!
    
    // MARK: - UITableViewDelegate
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if let cell = tableView.cellForRow(at: indexPath) {
            for textField in textFields {
                if textField.isDescendant(of: cell) {
                    textField.becomeFirstResponder()
                }
            }
        }
    }
    
    // MARK: - UITextFieldDelegate
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if let index = textFields.index(of: textField) {
            if index < textFields.count - 1 {
                let nextTextField = textFields[index + 1]
                nextTextField.becomeFirstResponder()
            } else {
                textField.resignFirstResponder()
            }
        }
        return false
    }
    
    // MARK: - UIPickerViewDataSource
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return output.shippingMethods.count
    }
    
    // MARK: - UIPickerViewDelegate
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return output.shippingMethods[row]
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        shippingMethodTextField.text = output.shippingMethods[row]
    }
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        CreateOrderConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - UIViewController lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureViews()
    }
    
    func expirationDatePickerValueChanged() {
        let date = expirationDatePicker.date
        let request = CreateOrder.FormatExpirationDate.Request(date: date)
        output.formatExpirationDate(request: request)
    }
    
    // MARK: - Do something on load
    
    func configureViews() {
        // NOTE: Ask the Interactor to do some work
        
        for textField in textFields {
            textField.delegate = self
        }
        shippingMethodPicker.delegate = self
        shippingMethodPicker.dataSource = self
        shippingMethodTextField.inputView = shippingMethodPicker
        
        expirationDatePicker.datePickerMode = .date
        expirationDatePicker.addTarget(self, action: #selector(CreateOrderViewController.expirationDatePickerValueChanged), for: .valueChanged)
        expirationDateTextField.inputView = expirationDatePicker
    }
    
    // MARK: - Display something
    
    func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel) {
        // NOTE: Display the result from the Presenter
        
        let date = viewModel.date
        expirationDateTextField.text = date
    }
    
}
