//
//  CreateOrderPresenterTests.swift
//  LearningCleanSwift
//
//  Created by MatÃ­as Elorriaga on 10/11/16.
//  Copyright (c) 2016 melorriaga. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest

@testable import LearningCleanSwift

class CreateOrderPresenterTests: XCTestCase {
    
    // MARK: - Subject under test
    
    var sut: CreateOrderPresenter!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCreateOrderPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupCreateOrderPresenter() {
        sut = CreateOrderPresenter()
    }
    
    // MARK: - Test doubles
    
    class CreateOrderPresenterOutputSpy: CreateOrderPresenterOutput {
        
        var displayExpirationDateCalled = false
        var createOrderFormatExpirationDateViewModel: CreateOrder.FormatExpirationDate.ViewModel!
        
        func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel) {
            displayExpirationDateCalled = true
            createOrderFormatExpirationDateViewModel = viewModel
        }
        
    }
    
    class CreateOrderPresenterOutputMock: CreateOrderPresenterOutputSpy {
        
        func verifyDisplayExpirationDateIsCalled() -> Bool {
            return displayExpirationDateCalled
        }
        
        func verifyExpirationDateIsFormattedAs(date: String) -> Bool {
            return createOrderFormatExpirationDateViewModel.date == date
        }
        
    }
    
    // MARK: - Tests
    
    func testPresentExpirationDateShouldConvertDateToString() {
        // given
        let createOrderPresenterOutputMock = CreateOrderPresenterOutputMock()
        sut.output = createOrderPresenterOutputMock
        
        var dateComponents = DateComponents()
        dateComponents.year = 2007
        dateComponents.month = 6
        dateComponents.day = 29
        let date = Calendar.current.date(from: dateComponents)!
        let response = CreateOrder.FormatExpirationDate.Response(date: date)
        
        // when
        sut.presentExpirationDate(response: response)
        
        // then (spy)
        let returnedDate = createOrderPresenterOutputMock.createOrderFormatExpirationDateViewModel.date
        let expectedDate = "6/29/07"
        XCTAssertEqual(returnedDate, expectedDate)
        
        // then (mock)
        XCTAssert(createOrderPresenterOutputMock.verifyExpirationDateIsFormattedAs(date: expectedDate))
    }
    
    func testPresentExpirationDateShouldAskViewControllerToDisplayExpirationDate() {
        // given
        let createOrderPresenterOutputMock = CreateOrderPresenterOutputMock()
        sut.output = createOrderPresenterOutputMock
        
        let response = CreateOrder.FormatExpirationDate.Response(date: Date())
        
        // when
        sut.presentExpirationDate(response: response)
        
        // then (spy)
        XCTAssert(createOrderPresenterOutputMock.displayExpirationDateCalled)
        
        // then (mock)
        XCTAssert(createOrderPresenterOutputMock.verifyDisplayExpirationDateIsCalled())
    }
    
}
