//
//  CreateOrderViewControllerTests.swift
//  LearningCleanSwift
//
//  Created by Mat√≠as Elorriaga on 10/11/16.
//  Copyright (c) 2016 melorriaga. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest

@testable import LearningCleanSwift

class CreateOrderViewControllerTests: XCTestCase {
    
    var window: UIWindow!
    
    // MARK: - Subject under test
    
    var sut: CreateOrderViewController!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupCreateOrderViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupCreateOrderViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "CreateOrderViewController") as! CreateOrderViewController
        addViewToWindow()
    }
    
    func addViewToWindow() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: - Test doubles
    
    class CreateOrderViewControllerOutputSpy: CreateOrderViewControllerOutput {
        
        var formatExpirationDateCalled = false
        var createOrderFormatExpirationDateRequest: CreateOrder.FormatExpirationDate.Request!
        
        var shippingMethods = [String]()
        
        func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request) {
            formatExpirationDateCalled = true
            createOrderFormatExpirationDateRequest = request
        }
        
    }
    
    // MARK: - Tests
    
    func testTextFieldShouldHaveFocusWhenUserTapsOnTableViewRow() {
        // given
        
        // when
        sut.tableView(sut.tableView!, didSelectRowAt: IndexPath(row: 0, section: 0))
        
        // then
        let textField = sut.textFields[0]
        XCTAssert(textField.isFirstResponder)
    }
    
    func testCursorFocusShouldMoveToNextTextFieldWhenUserTapsReturnKey() {
        // given
        let currentTextField = sut.textFields[0]
        let nextTextField = sut.textFields[1]
        currentTextField.becomeFirstResponder()
        
        // when
        _ = sut.textFieldShouldReturn(currentTextField)
        
        // then
        XCTAssert(!currentTextField.isFirstResponder)
        XCTAssert(nextTextField.isFirstResponder)
    }
    
    func testKeyboardShouldBeDismissedWhenUserTapsReturnKeyWhenFocusIsInLastTextField() {
        // given
        
        // scroll to bottom of tableview so the last text field is visible
        let lastSectionIndex = sut.tableView.numberOfSections - 1
        let lastRowIndex = sut.tableView.numberOfRows(inSection: lastSectionIndex) - 1
        let lastIndexPath = IndexPath(row: lastRowIndex, section: lastSectionIndex)
        sut.tableView.scrollToRow(at: lastIndexPath, at: .bottom, animated: false)
        
        // show keyboard for the last text field
        let textFieldsCount = sut.textFields.count
        let lastTextField = sut.textFields[textFieldsCount - 1]
        lastTextField.becomeFirstResponder()
        
        // when
        _ = sut.textFieldShouldReturn(lastTextField)
        
        // then
        XCTAssert(!lastTextField.isFirstResponder)
    }
    
    func testNumberOfComponentsInPickerViewShouldReturnOneComponent() {
        // given
        let pickerView = sut.shippingMethodPicker
        
        // when
        let numberOfComponents = sut.numberOfComponents(in: pickerView)
        
        // then
        XCTAssertEqual(numberOfComponents, 1)
    }
    
    func testNumberOfRowsInFirstComponentOfPickerViewShouldEqualNumberOfAvailableShippingMethods() {
        // given
        let pickerView = sut.shippingMethodPicker
        
        // when
        let numberOfRowsInComponent = sut.pickerView(pickerView, numberOfRowsInComponent: 0)
        
        // then
        let numberOfAvailableShippingMethods = sut.output.shippingMethods.count
        XCTAssertEqual(numberOfRowsInComponent, numberOfAvailableShippingMethods)
    }
    
    func testShippingMethodPickerViewShouldDisplayProperTitles() {
        // given
        let pickerView = sut.shippingMethodPicker
        
        // when
        let returnedTitles = [
            sut.pickerView(pickerView, titleForRow: 0, forComponent: 0),
            sut.pickerView(pickerView, titleForRow: 1, forComponent: 0),
            sut.pickerView(pickerView, titleForRow: 2, forComponent: 0)
        ]
        
        // then
        let expectedTitles = [
            "Standard Shipping",
            "Two-Day Shipping",
            "One-Day Shipping"
        ]
        XCTAssertEqual(returnedTitles[0], expectedTitles[0])
        XCTAssertEqual(returnedTitles[1], expectedTitles[1])
        XCTAssertEqual(returnedTitles[2], expectedTitles[2])
    }
    
    func testSelectingShippingMethodInPickerViewShouldDisplaySelectedMethodToUser() {
        // given
        let pickerView = sut.shippingMethodPicker
        
        // when
        sut.pickerView(pickerView, didSelectRow: 1, inComponent: 0)
        
        // then
        let expectedShippingMethod = "Two-Day Shipping"
        let displayedShippingMethod = sut.shippingMethodTextField.text
        XCTAssertEqual(displayedShippingMethod, expectedShippingMethod)
    }
    
    func testExpirationDatePickerValueChangedShouldFormatSelectedDate() {
        // given
        let createOrderViewControllerOutputSpy = CreateOrderViewControllerOutputSpy()
        sut.output = createOrderViewControllerOutputSpy
        
        var dateComponents = DateComponents()
        dateComponents.year = 2007
        dateComponents.month = 6
        dateComponents.day = 29
        let selectedDate = Calendar.current.date(from: dateComponents)!
        
        // when
        sut.expirationDatePicker.date = selectedDate
        sut.expirationDatePickerValueChanged()
        
        // then
        XCTAssert(createOrderViewControllerOutputSpy.formatExpirationDateCalled)
        let actualDate = createOrderViewControllerOutputSpy.createOrderFormatExpirationDateRequest.date
        XCTAssertEqual(actualDate, selectedDate)
    }
    
    func testCreateOrderViewControllerShouldConfigurePickersWhenViewIsLoaded() {
        // given
        
        // when
        
        // then
        XCTAssertEqual(sut.expirationDateTextField.inputView, sut.expirationDatePicker)
        XCTAssertEqual(sut.shippingMethodTextField.inputView, sut.shippingMethodPicker)
    }
    
    func testDisplayExpirationDateShouldDisplayDateStringInTextField() {
        // given
        let viewModel = CreateOrder.FormatExpirationDate.ViewModel(date: "6/29/07")
        
        // when
        sut.displayExpirationDate(viewModel: viewModel)
        
        // then
        let displayedDate = sut.expirationDateTextField.text
        XCTAssertEqual(displayedDate, "6/29/07")
    }
    
}
